#! /usr/bin/env node

var spawn = require('child_process').spawn,
    exec = require('child_process').exec,
    path = require('path'),
    chalk = require('chalk'),
    inquirer = require('inquirer'),
    Spinner = require('cli-spinner').Spinner,
    package = require('../package.json'),
    isWin = /^win/.test(process.platform),
    args = process.argv;

// Helper functions
/**
 * Executes the PS1 script upgrading npm
 * @param  {string}   version     - The version to be installed (npm install npm@{version})
 * @param  {string}   nodePath    - Path to Node installation (optional)
 * @param  {Function} cb          - Callback
 * @return {stderr[], stdout[]}   - stderr and stdout received from the PS1 process
 */
function runPowershell(version, nodePath, cb) {
    var scriptPath = path.resolve(__dirname, '../powershell/upgrade-npm.ps1'),
        specialArgs = nodePath === null ?
            '& {& \'' + scriptPath + '\' -version \'' + version + '\' }' :
            '& {& \'' + scriptPath + '\' -version \'' + version + '\' -NodePath \'' + nodePath + '\' }',
        psArgs = ['-NoProfile', '-NoLogo', specialArgs],
        child = spawn('powershell.exe', psArgs),
        stdout = [], stderr = [];

    child.stdout.on('data', function (data) {
        stdout.push(data.toString());
    });

    child.stderr.on('data', function (data) {
        console.log('Error: ', data.toString());
        stderr.push(data.toString());
    });

    child.on('exit', function () {
        cb(stderr, stdout);
    });

    child.stdin.end();
}

/**
 * Checks for an active Internet connection by doing a DNS lookup of Microsoft.com
 * @param  {Function} cb - Callback
 * @return {boolean}     - True if lookup succeeded, false if it didn't
 */
function checkForInternet(cb) {
    require('dns').lookup('microsoft.com', function (err) {
        if (err && err.code === 'ENOTFOUND') {
            cb(false);
        } else {
            cb(true);
        }
    });
}

/**
 * Fetches the published versions of npm from the npm registry
 * @param  {Function} cb - Callback
 * @return {versions[]}  - Array of the available versions
 */
function getAvailableNPMVersions(cb) {
    exec('npm view npm versions --json', function (err, stdout) {
        if (err) {
            return console.error(chalk.red.bold('We could not show latest available versions. Try running this script again with the version you want to install (npm-windows-upgrade --version:3.0.0'));
        }

        cb(JSON.parse(stdout));
    });
}

/**
 * Gets the currently installed version of npm (npm -v)
 * @param  {Function} cb - Callback
 * @return {string}      - Installed version of npm
 */
function getNPMVersion(cb) {
    var nodeVersion;

    exec('npm -v', function (err, stdout) {
        if (err) {
            console.log(chalk.bold.red('Could not determine npm version.'));
            cb(null);
        } else {
            nodeVersion = stdout.replace(/\n/, '');
            cb(nodeVersion);
        }
    });
}

/**
 * Attempts to get the current installation location of npm by looking up the global prefix.
 * @param  {Function} cb - Callback
 * @return {string}      - NodeJS installation path
 */
function getNodePath(cb) {
    var nodePath;

    exec('npm config --global get prefix', function (err, stdout) {
        if (err) {
            console.log('Could not determine NodeJS location, will default to a Program Files directory.');
            cb(null);
        } else {
            nodePath = stdout.replace(/\n/, '');
            cb(nodePath);
        }
    });
}

/**
 * Checks the current Windows PS1 execution policy. The upgrader requires an unrestricted policy.
 * @param  {Function} cb - Callback
 * @return {[type]}      - True if unrestricted, false if it isn't
 */
function checkExecutionPolicy(cb) {
    var child = spawn('powershell.exe', ['-NoProfile', '-NoLogo', 'Get-ExecutionPolicy']),
        output = [], unrestricted, i;

    child.stdout.on('data', function (data) {
        output.push(data.toString());
    });

    child.stderr.on('data', function (data) {
        output.push(data.toString());
    });

    child.on('exit', function () {
        unrestricted = false;

        for (i = output.length - 1; i >= 0; i = i - 1) {
            if (output[i].indexOf('Unrestricted') > -1) {
                unrestricted = true;
                break;
            }
        }

        if (!unrestricted) {
            cb(false);
        } else {
            cb(true);
        }
    });

    child.stdin.end();
}

// Upgrade Method
/**
 * The actual upgrade method, utilizing all the helper methods above
 * @param  {string} version - Version that should be installed
 */
function upgradeNPM(version) {
    var spinner = new Spinner('Upgrading.. %s');
    spinner.start();

    getNodePath(function (nodePath) {
        runPowershell(version, nodePath, function (stderr, stdout) {
            spinner.stop(false);
            console.log('\n');

            if (stdout[0] && stdout[0].indexOf('You must be administrator to run this script') > -1) {
                console.log(chalk.bold.red('Upgrade aborted: You must be administrator to run this script. Upgrade aborted.'));
            } else if (stdout && stdout.length > 0 && stdout[stdout.length - 1].indexOf('All done!') > -1) {
                console.log(chalk.bold.green('Upgrade finished. Have a nice day!'));
            } else if (stderr.length < 1) {
                console.log(chalk.bold.green('We cannot confirm that the upgrade succeeded, but did not find any errors either.'));
            } else {
                console.log(chalk.bold.red('An unknown error occurred. The output of the upgrader script was: '));
                console.log(stdout, stderr);
            }
        });
    });
}

// Check OS
if (!isWin) {
    throw('This script upgrades npm on Windows, but the OS is not Windows.');
}

// Print version
console.log(chalk.yellow.bold('npm-windows-upgrade ' + package.version));

// Execute
inquirer.prompt({
    type: 'confirm',
    name: 'c',
    message: 'This tool will upgrade npm. Do you want to continue?'
}, function (response) {
    if (!response.c) {
        return console.log(chalk.bold.green('Well then, we\'re done here. Have a nice day!'));
    }

    checkExecutionPolicy(function (isUnrestricted) {
        if (!isUnrestricted) {
            console.log(chalk.bold.red('Scripts cannot be executed on this system.'));
            console.log('To fix this issue, please run the command below as Administrator and try again:');
            console.log('Set-ExecutionPolicy Unrestricted -Scope CurrentUser');
            return;
        }

        checkForInternet(function (isOnline) {
            var version = (args[2] && args[2].indexOf('--version:') > -1) ? args[2].slice(10) : null;

            if (!isOnline) {
                return console.err(chalk.bold.red('We have trouble connecting to the Internet. Aborting.'));
            }

            if (version) {
                upgradeNPM(version);
            } else {
                getAvailableNPMVersions(function (versions) {
                    var versionList = [{
                        type: 'list',
                        name: 'version',
                        message: 'Which version do you want to install?',
                        choices: versions.reverse()
                    }];

                    inquirer.prompt(versionList, function (answer) {
                        if (!answer.version) {
                            return console.err(chalk.bold.red('Could not determine version that should be installed. Aborting'));
                        }

                        upgradeNPM(answer.version);
                    });
                });
            }
        });
    });
});
