#! /usr/bin/env node

var spawn = require('child_process').spawn,
    exec = require('child_process').exec,
    path = require('path'),
    chalk = require('chalk'),
    inquirer = require('inquirer'),
    package = require('../package.json'),
    isWin = /^win/.test(process.platform),
    args = process.argv;

// Helper functions
function runPowershell(scriptPath, exitMessage, cb) {
    var child = spawn('powershell.exe', ['-NoProfile', '-NoLogo', "& {& '"+ scriptPath + "'}"]), // jshint ignore:line
        output = [];

    child.stdout.on('data', function (data) {
        console.log(data.toString());
        output.push(data.toString());
    });

    child.stderr.on('data', function (data) {
        console.log('Configuration Error: ', data.toString());
        output.push(data.toString());
    });

    child.on('exit', function () {
        console.log(exitMessage);
        cb(output);
    });

    child.stdin.end();
}

function upgradeNPM(cb) {
    var scriptPath = path.resolve(__dirname, '../powershell/upgrade-npm.ps1'),
        exitMessage = 'npm upgrade has finished';

    runPowershell(scriptPath, exitMessage, cb);
}

function getAvailableVersions(cb) {
    var versions;

    exec('npm view npm versions --json', function (err, stdout) {
        if (err) {
            return console.err(chalk.red.bold('We could not show latest available versions. Try running this script again with the version you want to install (npm-upgrade-windows --version:3.0.0'));
        }

        cb(JSON.parse(stdout));
    });
}

function checkForInternet(cb) {
    require('dns').lookup('microsoft.com', function (err) {
        if (err && err.code === 'ENOTFOUND') {
            cb(false);
        } else {
            cb(true);
        }
    });
}

// Check OS
if (!isWin) {
    //throw('This script upgrade npm on Windows, but the OS is not Windows.');
}

// Print version
console.log(chalk.yellow.bold('npm-upgrade-windows ' + package.version));

// Execute
checkForInternet(function (isOnline) {
    if (!isOnline) {
        return console.err(chalk.bold.red('We have trouble connecting to the Internet, aborting'));
    }

    getAvailableVersions(function (versions) {
        var questions = [{
            type: 'confirm',
            name: 'confirm',
            message: 'This tool will upgrade your installed npm version. Do you want to continue?'
        }, {
            type: 'list',
            name: 'version',
            message: 'Which version do you want to install?',
            choices: versions.reverse()
        }];

        inquirer.prompt(questions, function(answers) {
            console.log(JSON.stringify(answers, null, "  ") );
        });
    });
});


