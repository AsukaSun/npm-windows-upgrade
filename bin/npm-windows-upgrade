#! /usr/bin/env node

var spawn = require('child_process').spawn,
    exec = require('child_process').exec,
    path = require('path'),
    chalk = require('chalk'),
    inquirer = require('inquirer'),
    Spinner = require('cli-spinner').Spinner,
    package = require('../package.json'),
    isWin = /^win/.test(process.platform),
    args = process.argv;

// Helper functions
function runPowershell(version, cb) {
    var scriptPath = path.resolve(__dirname, '../powershell/upgrade-npm.ps1'),
        child = spawn('powershell.exe', ['-NoProfile', '-NoLogo', '& {& \'' + scriptPath + '\' -version \'' + version + '\'}']),
        output = [];

    child.stdout.on('data', function (data) {
        console.log(data.toString());
        output.push(data.toString());
    });

    child.stderr.on('data', function (data) {
        console.log('Error: ', data.toString());
        output.push(data.toString());
    });

    child.on('exit', function () {
        cb(output);
    });

    child.stdin.end();
}

function getAvailableVersions(cb) {
    exec('npm view npm versions --json', function (err, stdout) {
        if (err) {
            return console.error(chalk.red.bold('We could not show latest available versions. Try running this script again with the version you want to install (npm-upgrade-windows --version:3.0.0'));
        }

        cb(JSON.parse(stdout));
    });
}

function checkForInternet(cb) {
    require('dns').lookup('microsoft.com', function (err) {
        if (err && err.code === 'ENOTFOUND') {
            cb(false);
        } else {
            cb(true);
        }
    });
}

function upgradeNPM(version) {
    var spinner = new Spinner('Upgrading.. %s');
    spinner.start();

    runPowershell(version, function () {
        spinner.stop(false);
        console.log(chalk.bold.green('Upgrade finished. Have a nice day!'));
    });
}

// Check OS
if (!isWin) {
    throw('This script upgrade npm on Windows, but the OS is not Windows.');
}

// Print version
console.log(chalk.yellow.bold('npm-upgrade-windows ' + package.version));

// Execute
inquirer.prompt({type: 'confirm', name: 'c', message: 'This tool will upgrade npm. Do you want to continue?'}, function (response) {
    if (!response.c) {
        return console.log(chalk.bold.green('Well then, we\'re done here. Have a nice day!'));
    }

    checkForInternet(function (isOnline) {
        var version = (args[2] && args[2].indexOf('--version:') > -1) ? args[2].slice(10) : null;

        if (!isOnline) {
            return console.err(chalk.bold.red('We have trouble connecting to the Internet, aborting'));
        }

        if (version) {
            upgradeNPM(version);
        } else {
            getAvailableVersions(function (versions) {
                var versionList = [{
                    type: 'list',
                    name: 'version',
                    message: 'Which version do you want to install?',
                    choices: versions.reverse()
                }];

                inquirer.prompt(versionList, function (answer) {
                    if (!answer.version) {
                        return console.err(chalk.bold.red('Could not determine version that should be installed. Aborting'));
                    }

                    upgradeNPM(answer.version);
                });
            });
        }
    });
});
